import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { DatabaseService } from 'src/database/database.service';
export declare class UsersService {
    private DatabaseService;
    constructor(DatabaseService: DatabaseService);
    createUser(createUserDto: CreateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(userId: string, udateuserDto: UpdateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getAllUsers(): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getUserById(id: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getUserByUsername(username: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getUserByEmail(email: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateUser(id: string, updateUserDto: UpdateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateAvatar(id: string, avatar: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updatePassword(id: string, password: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateUsername(id: string, updateUserDto: UpdateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateEmail(id: string, updateUserDto: UpdateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateFirstName(id: string, updateUserDto: UpdateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateLastName(id: string, updateUserDto: UpdateUserDto): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteUser(id: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getUserByIntraId(intraId: string): Promise<{
        userId: string;
        email: string;
        username: string;
        intraId: string;
        online: boolean;
        firstName: string;
        bio: string;
        lastName: string;
        password: string;
        refreshToken: string;
        avatar: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    GetSearchedUsers(name: string, currentUserID: string): Promise<{
        username: string;
        email: string;
        avatar: string;
    }[]>;
}
