// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId           String           @id @default(uuid())
  email            String?          @unique
  username         String?          @unique
  intraId          String?          @unique
  online           Boolean          @default(false)
  firstName        String?
  bio              String?          @default("Hey there! iam using iPong")
  lastName         String?
  level            Int              @default(0)
  isVerified       Boolean          @default(false)
  FriendsCount     Int              @default(0)
  githubLink       String?          @default("")
  linkedInLink     String?          @default("")
  password         String?
  refreshToken     String?
  avatar           String?
  cover            String?          @default("https://res.cloudinary.com/dnc5talpg/image/upload/v1717761298/iPong/pejq82xvp3p3sxdmb6gg.jpg")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  recipient        Notification[]  @relation("recipient")
  sender           Notification[] @relation("sender")
  firstFriendship  Friendship[]     @relation("from")
  secondFriendship Friendship[]     @relation("to")
  blockedByUser    BlockedUser[]    @relation("blockeById")
  blockedUser      BlockedUser[]    @relation("blockedId")
  message          Message[]
  ownedRooms       ChatRoom[]
  roomMember       ChatRoomMember[]

  // (Game)
  player1          Game[]           @relation("player1")
  player2          Game[]           @relation("player2")
  winner           Game[]           @relation("winner")


  // l3alamia
  xp               Int              @default(0)
  wallet           Int              @default(10)

  // loby
  skins            Skin[]
  boards           Board[]
}


model Skin {
  id          String    @id @default(uuid())
  name        String
  imageUrl    String
  price       Int       @default(0)
  createdAt   DateTime  @default(now())
  users       User[]
}

model Board {
  id          String    @id @default(uuid())
  name        String
  imageUrl    String
  price       Int       @default(0)
  createdAt   DateTime  @default(now())
  users       User[]
}

model Friendship {
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  id        String           @id @default(uuid())
  fromUser  String
  toUser    String
  from      User             @relation("from", fields: [fromUser], references: [userId], onDelete: Cascade)
  to        User             @relation("to", fields: [toUser], references: [userId], onDelete: Cascade)
  status    FriendshipStatus

  @@unique([fromUser, toUser], name: "unique_friendship")
}

model BlockedUser {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(uuid())
  dmId       String?
  blocked    String
  blockedBy  String
  blockedId  User     @relation("blockedId", fields: [blocked], references: [userId], onDelete: Cascade)
  blockeById User     @relation("blockeById", fields: [blockedBy], references: [userId], onDelete: Cascade)

  @@unique([blocked, blockedBy], name: "unique_block")
}

model Message {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(uuid())
  author     User     @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  authorId   String
  content    String
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String

  @@unique([createdAt]) // no dupliccate msg
}

model ChatRoomMember {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(uuid())
  isAdmin    Boolean          @default(false)
  isBanned   Boolean          @default(false)
  bannedAt   DateTime @updatedAt
  isMuted    Boolean          @default(false)
  muted_exp    DateTime?
  member     User     @relation(fields: [memberID], references: [userId], onDelete: Cascade)
  memberID   String
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String

  @@unique([memberID, chatRoomId], name: "unique_member_room")
}

model ChatRoom {
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  id        String           @id @default(uuid())
  icon      String?
  roomName  String?
  password  String?
  type      ChatRoomType     @default(public)
  owner     User             @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  ownerId   String
  messages  Message[]

  members   ChatRoomMember[]
}

model Game {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  player1Id   String
  player2Id   String
  player1     User     @relation("player1", fields: [player1Id], references: [userId], onDelete: Cascade)
  player2     User     @relation("player2", fields: [player2Id], references: [userId], onDelete: Cascade)
  winnerId    String?
  winner      User?    @relation("winner", fields: [winnerId], references: [userId], onDelete: SetNull)

  // by abdo
  gameStatus    GameStatus
  minScore      Int
  maxScore      Int
  winnerVbucks  Int    @default(0)
  loserVbucks   Int    @default(0)
}

model Notification {
  id          String           @id @unique
  createdAt   DateTime         @default(now())
  entityType        NotificationType
  isRead      Boolean          @default(false)
  receiver   User             @relation("recipient" ,fields: [receiverId], references: [userId], onDelete: Cascade)
  receiverId String
  sender      User             @relation("sender", fields: [senderId], references: [userId], onDelete: Cascade)
  senderId    String
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}


enum NotificationType {
  FriendRequest
  FriendRequestAccepted
  JoinRoom
  MessageReceived
}

enum ChatRoomType {
  public
  Dm
  private
  protected
}

enum GameStatus {
  CANCELED
  PLAYED
}